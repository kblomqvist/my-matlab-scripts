% Phase sensitive detector demonstartion
%
% Needs kblomqvits' matlab library
%
%% Add library path
CURRENT_PATH = cd;
LIBRARY_PATH = [CURRENT_PATH, '/../../library'];

addpath([LIBRARY_PATH, '/kb/signals'], '-begin');
addpath([LIBRARY_PATH, '/kb/electronics'], '-begin');
addpath([LIBRARY_PATH, '/kb'], '-begin');

%% Static demo
Fs = 10000;
T = 1/Fs;
L = 1000;
t = (0:L-1)*T;

% Local oscillators
A_lo = 1; f_lo = 50;
lo_i = A_lo*sin(2*pi*f_lo*t);        % LO oscillator in phase
lo_q = A_lo*sin(2*pi*f_lo*t + pi/2); % LO quadrature phase

% Use comparator for LO signals
% Try what happens if you comment these two lines
lo_i = kb_comparator(lo_i);
lo_q = kb_comparator(lo_q);

% Input signal, try variate phase (and frequency, but take care of Fs)
A_in = 1; f_in = 50; pha = 0;
in = A_in*sin(2*pi*f_in*t + pha);

% Detected signal
i = lo_i.*in;       % Input signal mixed in phase local oscillator
q = lo_q.*in;       % Input signal mixed quadrature phase local oscillator

% Low-pass filtering for detected signal, ideal fc = 0 Hz!
i_filt = kb_integral(i);
q_filt = kb_integral(q);

% Plot time domain signals
figure(1);
subplot(3,2,1); plot(t, lo_i, 'r--', 'lineWidth', 2); hold on; plot(t, in); hold off;
subplot(3,2,2); plot(t, lo_q, 'r--', 'lineWidth', 2), hold on; plot(t, in); hold off;
subplot(3,2,3); plot(t, i_filt, 'r--', 'lineWidth', 2); hold on; plot(t, i); hold off;
subplot(3,2,4); plot(t, q_filt, 'r--', 'lineWidth', 2), hold on; plot(t, q); hold off;

NFFT = 2^nextpow2(L); % Next power of 2 from length of y
Y_i = fft(i,NFFT)/L;
Y_q = fft(q,NFFT)/L;
f = Fs/2*linspace(0,1,NFFT/2+1);
subplot(3,2,5); plot(f, abs(Y_i(1:NFFT/2+1)));
subplot(3,2,6); plot(f, abs(Y_q(1:NFFT/2+1)));